#!/bin/bash

# Function to validate version format (vX.X or vX.X.X)
validate_version() {
  if [[ $1 =~ ^v[0-9]+\.[0-9]+(\.[0-9]+)?$ ]]; then
    return 0
  else
    return 1
  fi
}

if [ -z "$1" ]; then
  echo "Error: You must provide a version number (e.g., v1.0 or v1.0.15)."
  exit 1
fi

version=$1
if ! validate_version "$version"; then
  echo "Error: Invalid version format. Use vX.X or vX.X.X (e.g., v1.0 or v1.0.15)."
  exit 1
fi

if [ -n "$(git status --porcelain)" ]; then
  echo "Error: There are uncommitted or modified files."
  echo "Please commit or stash your changes before running this script."
  exit 1
fi

current_branch=$(git branch --show-current)
if [ "$current_branch" != "dev" ]; then
  echo "Error: You are not on the 'dev' branch."
  exit 1
fi

# Make sure the prod branch is up to date
git fetch origin

echo "Transpiling files..."
npm run build

echo "Switching to the prod branch..."
git checkout prod
git merge dev --no-commit

echo "Adding transpiled files..."
git add *.js

# Check if there are staged changes (to avoid empty commits)
if git diff --cached --quiet; then
  echo "No changes to commit. Exiting..."
  git checkout dev
  exit 0
fi

echo "Committing transpiled files to the prod branch..."
git commit -m "$version"

echo "Creating a tag for version $version..."
git tag -a "$version"

echo "Pushing changes and tag to the prod branch..."
git push origin prod
git push origin "$version"

echo "Switching back to the dev branch..."
git checkout dev

echo "The changes have been successfully deployed to production."
